"This program will parse matrix files to convert them into objects usable by JS files"
# libraries' imports for create the parser
## librairy to create the json object
import json
## library for using regular expressions 
import re

# opening of all files, each containing a BLOSUM matrix
blosum30=open("Blosum/EBLOSUM30.txt")
blosum35=open("Blosum/EBLOSUM35.txt")
blosum40=open("Blosum/EBLOSUM40.txt")
blosum45=open("Blosum/EBLOSUM45.txt")
blosum50=open("Blosum/EBLOSUM50.txt")
blosum55=open("Blosum/EBLOSUM55.txt")
blosum60=open("Blosum/EBLOSUM60.txt")
blosum62=open("Blosum/EBLOSUM62.txt")
blosum6212=open("Blosum/EBLOSUM62-12.txt")
blosum65=open("Blosum/EBLOSUM65.txt")
blosum70=open("Blosum/EBLOSUM70.txt")
blosum75=open("Blosum/EBLOSUM75.txt")
blosum80=open("Blosum/EBLOSUM80.txt")
blosum85=open("Blosum/EBLOSUM85.txt")
blosum90=open("Blosum/EBLOSUM90.txt")
blosumn=open("Blosum/EBLOSUMN.txt")
# opening of all files, each containing a PAM matrix
PAM10=open("PAM/EPAM10.txt")
PAM20=open("PAM/EPAM20.txt")
PAM30=open("PAM/EPAM30.txt")
PAM40=open("PAM/EPAM40.txt")
PAM50=open("PAM/EPAM50.txt")
PAM60=open("PAM/EPAM60.txt")
PAM70=open("PAM/EPAM70.txt")
PAM80=open("PAM/EPAM80.txt")
PAM90=open("PAM/EPAM90.txt")
PAM100=open("PAM/EPAM100.txt")
PAM110=open("PAM/EPAM110.txt")
PAM120=open("PAM/EPAM120.txt")
PAM130=open("PAM/EPAM130.txt")
PAM140=open("PAM/EPAM140.txt")
PAM150=open("PAM/EPAM150.txt")
PAM160=open("PAM/EPAM160.txt")
PAM170=open("PAM/EPAM170.txt")
PAM180=open("PAM/EPAM180.txt")
PAM190=open("PAM/EPAM190.txt")
PAM200=open("PAM/EPAM200.txt")
PAM210=open("PAM/EPAM210.txt")
PAM220=open("PAM/EPAM220.txt")
PAM230=open("PAM/EPAM230.txt")
PAM240=open("PAM/EPAM240.txt")
PAM250=open("PAM/EPAM250.txt")
PAM260=open("PAM/EPAM260.txt")
PAM270=open("PAM/EPAM270.txt")
PAM280=open("PAM/EPAM280.txt")
PAM290=open("PAM/EPAM290.txt")
PAM300=open("PAM/EPAM300.txt")
PAM310=open("PAM/EPAM310.txt")
PAM320=open("PAM/EPAM320.txt")
PAM330=open("PAM/EPAM330.txt")
PAM340=open("PAM/EPAM340.txt")
PAM350=open("PAM/EPAM350.txt")
PAM360=open("PAM/EPAM360.txt")
PAM370=open("PAM/EPAM370.txt")
PAM380=open("PAM/EPAM380.txt")
PAM390=open("PAM/EPAM390.txt")
PAM400=open("PAM/EPAM400.txt")
PAM410=open("PAM/EPAM410.txt")
PAM420=open("PAM/EPAM420.txt")
PAM430=open("PAM/EPAM430.txt")
PAM440=open("PAM/EPAM440.txt")
PAM450=open("PAM/EPAM450.txt")
PAM460=open("PAM/EPAM460.txt")
PAM470=open("PAM/EPAM470.txt")
PAM480=open("PAM/EPAM480.txt")
PAM490=open("PAM/EPAM490.txt")
PAM500=open("PAM/EPAM500.txt")

#opening of the file which will be writed
mat=open ("matrixlist.json","w")
#creation of the beginning of the file
mat.write("matrixlist=")
mat.write("{")

def parser(matrix1):
	#reading of the matrix file, line by line
	matrix=[]
	name=""
	content= matrix1.read()
	lines= content.split("\n")
	#for each line, delete spaces, write the matrix name and, after, scores into the matrix
	for i in lines:
		j=i.split(" ")
		for k in range(len(j)):
			if j[0]=="#":
				if re.match(r"blosum[0-9]{,4}\.iij", j[k])or re.match(r"blosum[0-9]{,4}\_[0-9]\.iij", j[k]) or re.match(r"blosumn", j[k]) :
					l=j[k].split(".")
					name=str(l[0])
					
				elif j[k]=="PAM" and re.match(r"[0-9]{,4}",j[k+1]):
					name=str(j[k]+j[k+1])
					
			if j[0]!="#":
				if re.match(r"[-][0-9]",j[k]) or re.match(r"[0-9]",j[k]):
					matrix.append(float(j[k]))	
	#convert the Python list in JSON object
	matrix2=json.dumps(matrix)
	#writing in the JSON document of the matrix
	mat.write(name)
	mat.write(":")
	mat.write(matrix2)
	mat.write(",\n")

#execution of the parser for all matrices 
parser(blosum30)
parser(blosum35)
parser(blosum40)
parser(blosum45)
parser(blosum50)
parser(blosum55)
parser(blosum60)
parser(blosum62)
parser(blosum6212)
parser(blosum65)
parser(blosum70)
parser(blosum75)
parser(blosum80)
parser(blosum85)
parser(blosum90)
parser(blosumn)
parser(PAM10)
parser(PAM20)
parser(PAM30)
parser(PAM40)
parser(PAM50)
parser(PAM60)
parser(PAM70)
parser(PAM80)
parser(PAM90)
parser(PAM100)
parser(PAM110)
parser(PAM120)
parser(PAM130)
parser(PAM140)
parser(PAM150)
parser(PAM160)
parser(PAM170)
parser(PAM180)
parser(PAM190)
parser(PAM200)
parser(PAM210)
parser(PAM220)
parser(PAM230)
parser(PAM240)
parser(PAM250)
parser(PAM260)
parser(PAM270)
parser(PAM280)
parser(PAM290)
parser(PAM300)
parser(PAM310)
parser(PAM320)
parser(PAM330)
parser(PAM340)
parser(PAM350)
parser(PAM360)
parser(PAM370)
parser(PAM380)
parser(PAM390)
parser(PAM400)
parser(PAM410)
parser(PAM420)
parser(PAM430)
parser(PAM440)
parser(PAM450)
parser(PAM460)
parser(PAM470)
parser(PAM480)
parser(PAM490)
parser(PAM500)

# closing of all matrix files, writing the end of the JSON file et closing of this one
blosum30.close()
blosum35.close()
blosum40.close()
blosum45.close()
blosum50.close()
blosum55.close()
blosum60.close()
blosum62.close()
blosum6212.close()
blosum65.close()
blosum70.close()
blosum75.close()
blosum80.close()
blosum85.close()
blosum90.close()
blosumn.close()
PAM10.close()
PAM20.close()
PAM30.close()
PAM40.close()
PAM50.close()
PAM60.close()
PAM70.close()
PAM80.close()
PAM90.close()
PAM100.close()
PAM110.close()
PAM120.close()
PAM130.close()
PAM140.close()
PAM150.close()
PAM160.close()
PAM170.close()
PAM180.close()
PAM190.close()
PAM200.close()
PAM210.close()
PAM220.close()
PAM230.close()
PAM240.close()
PAM250.close()
PAM260.close()
PAM270.close()
PAM280.close()
PAM290.close()
PAM300.close()
PAM310.close()
PAM320.close()
PAM330.close()
PAM340.close()
PAM350.close()
PAM360.close()
PAM370.close()
PAM380.close()
PAM390.close()
PAM400.close()
PAM410.close()
PAM420.close()
PAM430.close()
PAM440.close()
PAM450.close()
PAM460.close()
PAM470.close()
PAM480.close()
PAM490.close()
PAM500.close()
mat.write("}")
mat.close()
